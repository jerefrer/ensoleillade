---
import { getTranslations, getLocaleFromUrl, getAlternateUrls } from '../utils/i18n.js';

interface Props {
  title?: string;
  description?: string;
  image?: string;
  locale?: string;
}

const { title, description, image, locale } = Astro.props;
const currentLocale = locale || getLocaleFromUrl(Astro.url);
const t = getTranslations(currentLocale);
const alternateUrls = getAlternateUrls(Astro.url.pathname, currentLocale);

const siteTitle = title || t.site.title;
const siteDescription = description || t.site.description;
const siteImage = image || '/og-image.jpg';
const canonicalUrl = new URL(Astro.url.pathname, Astro.site);
---

<!DOCTYPE html>
<html lang={currentLocale} class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Primary Meta Tags -->
    <title>{siteTitle}</title>
    <meta name="title" content={siteTitle} />
    <meta name="description" content={siteDescription} />
    <meta name="keywords" content={t.site.keywords} />
    <link rel="canonical" href={canonicalUrl} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalUrl} />
    <meta property="og:title" content={siteTitle} />
    <meta property="og:description" content={siteDescription} />
    <meta property="og:image" content={new URL(siteImage, Astro.site)} />
    <meta property="og:locale" content={currentLocale === 'fr' ? 'fr_FR' : 'en_US'} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalUrl} />
    <meta property="twitter:title" content={siteTitle} />
    <meta property="twitter:description" content={siteDescription} />
    <meta property="twitter:image" content={new URL(siteImage, Astro.site)} />
    
    <!-- Alternate languages -->
    {Object.entries(alternateUrls).map(([lang, url]) => (
      <link rel="alternate" hreflang={lang} href={new URL(url, Astro.site)} />
    ))}
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    
    <!-- Preload critical resources -->
    <link rel="preload" href="/fonts/inter-var.woff2" as="font" type="font/woff2" crossorigin />
    
    <!-- Structured Data -->
    <script type="application/ld+json" set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "LodgingBusiness",
      "name": "L'Ensoleillade",
      "description": siteDescription,
      "url": canonicalUrl.toString(),
      "image": new URL(siteImage, Astro.site).toString(),
      "address": {
        "@type": "PostalAddress",
        "addressLocality": "Saint-Léon-sur-Vézère",
        "addressRegion": "Dordogne",
        "addressCountry": "FR"
      },
      "geo": {
        "@type": "GeoCoordinates",
        "latitude": "45.015",
        "longitude": "1.095"
      },
      "amenityFeature": [
        { "@type": "LocationFeatureSpecification", "name": "Free WiFi" },
        { "@type": "LocationFeatureSpecification", "name": "Free Parking" },
        { "@type": "LocationFeatureSpecification", "name": "Air Conditioning" },
        { "@type": "LocationFeatureSpecification", "name": "Kitchenette" },
        { "@type": "LocationFeatureSpecification", "name": "Terrace" },
        { "@type": "LocationFeatureSpecification", "name": "Garden View" }
      ],
      "checkinTime": "15:00",
      "checkoutTime": "11:00",
      "numberOfRooms": 1,
      "maximumAttendeeCapacity": 2
    })} />
    
    <style>
      /* Critical CSS for font loading */
      @font-face {
        font-family: 'Inter';
        font-style: normal;
        font-weight: 100 900;
        font-display: swap;
        src: url('/fonts/inter-var.woff2') format('woff2');
      }
      
      /* Prevent layout shift and enhanced typography */
      html {
        font-family: Inter, system-ui, sans-serif;
        scroll-behavior: smooth;
        overflow-x: hidden;
      }
      
      /* Enhanced smooth transitions */
      * {
        transition: color 0.3s cubic-bezier(0.4, 0, 0.2, 1), 
                    background-color 0.3s cubic-bezier(0.4, 0, 0.2, 1),
                    transform 0.3s cubic-bezier(0.4, 0, 0.2, 1),
                    opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1),
                    box-shadow 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }
      
      /* Modern typography enhancements */
      body {
        font-feature-settings: 'kern' 1, 'liga' 1, 'calt' 1, 'pnum' 1, 'tnum' 0, 'onum' 1, 'lnum' 0, 'dlig' 0;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        text-rendering: optimizeLegibility;
      }
      
      
      /* Glass morphism utility */
      .glass {
        background: rgba(255, 255, 255, 0.85);
        backdrop-filter: blur(12px);
        -webkit-backdrop-filter: blur(12px);
        border: 1px solid rgba(255, 255, 255, 0.2);
      }
      
      /* Modern card hover effects */
      .card-hover {
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      }
      
      .card-hover:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 20px 40px -12px rgba(0, 0, 0, 0.15);
      }
      
      /* Intersection Observer animation classes */
      .animate-on-scroll {
        opacity: 0;
        transform: translateY(30px);
        transition: all 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      }
      
      .animate-on-scroll.is-visible {
        opacity: 1;
        transform: translateY(0);
      }
      
      /* Organic shapes and curved sections */
      .section-curve::before {
        content: '';
        position: absolute;
        top: -50px;
        left: 0;
        width: 100%;
        height: 50px;
        background: inherit;
        clip-path: ellipse(100% 100% at 50% 100%);
      }
    </style>
  </head>
  
  <body class="bg-warm-50 text-earth-900 antialiased">
    
    <!-- Skip to main content for accessibility -->
    <a href="#main" class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-earth-800 text-warm-50 px-4 py-2 rounded-md z-50">
      {currentLocale === 'fr' ? 'Aller au contenu principal' : 'Skip to main content'}
    </a>
    
    <div class="min-h-screen flex flex-col">
      <main id="main" class="flex-1">
        <slot />
      </main>
      
      <!-- Footer -->
      <footer class="bg-forest-800 text-warm-100 py-12">
        <div class="max-w-6xl mx-auto px-4">
          <div class="text-center space-y-4">
            <p class="text-lg font-serif">{t.footer.permaculture}</p>
            <div class="flex flex-wrap justify-center gap-6 text-sm">
              <span>{t.footer.eco}</span>
              <span>{t.footer.local}</span>
            </div>
            <div class="pt-8 border-t border-forest-700">
              <p class="text-xs opacity-75">
                © {new Date().getFullYear()} L'Ensoleillade - {currentLocale === 'fr' ? 'Tous droits réservés' : 'All rights reserved'}
              </p>
            </div>
          </div>
        </div>
      </footer>
    </div>
    
    <script>
      // Modern scroll progress and animation system
      class ModernAnimations {
        constructor() {
          this.initScrollProgress();
          this.initScrollAnimations();
          this.initIntersectionObserver();
        }

        initScrollProgress() {
          // Progress bar removed - no longer needed
        }

        initScrollAnimations() {
          // Smooth anchor scrolling with offset for fixed header
          document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
              e.preventDefault();
              const target = document.querySelector(this.getAttribute('href'));
              if (target) {
                const headerOffset = 80;
                const elementPosition = target.getBoundingClientRect().top;
                const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

                window.scrollTo({
                  top: offsetPosition,
                  behavior: 'smooth'
                });
              }
            });
          });
        }

        initIntersectionObserver() {
          const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
          };

          const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                entry.target.classList.add('is-visible');
                // Add staggered delay for multiple elements
                const delay = entry.target.dataset.delay || 0;
                setTimeout(() => {
                  entry.target.style.transitionDelay = '0ms';
                }, delay);
              }
            });
          }, observerOptions);

          // Observe all elements with animation class
          document.querySelectorAll('.animate-on-scroll').forEach((el, index) => {
            el.dataset.delay = `${index * 100}ms`;
            el.style.transitionDelay = `${index * 100}ms`;
            observer.observe(el);
          });

          // Observe card hover elements for enhanced interactions
          document.querySelectorAll('.card-hover').forEach(card => {
            card.addEventListener('mouseenter', () => {
              card.style.transform = 'translateY(-8px) scale(1.02)';
            });
            
            card.addEventListener('mouseleave', () => {
              card.style.transform = 'translateY(0) scale(1)';
            });
          });
        }
      }

      // Initialize when DOM is loaded
      document.addEventListener('DOMContentLoaded', () => {
        new ModernAnimations();
      });
    </script>
  </body>
</html>