---
import { generateCalendarData, MONTH_NAMES, DAY_NAMES } from '../utils/calendar.js';

interface Props {
  bookedDates: string[];
  locale: string;
}

const { bookedDates = [], locale = 'fr' } = Astro.props;
const today = new Date();
const currentMonth = generateCalendarData(bookedDates, today.getFullYear(), today.getMonth());
const nextMonth = generateCalendarData(bookedDates, today.getFullYear(), today.getMonth() + 1);
---

<!-- Modern Calendar Component -->
<div class="bg-gradient-to-br from-white via-sage-50/30 to-warm-50/30 rounded-2xl shadow-large border border-sage-200 p-8 backdrop-blur-sm">
  
  <!-- Calendar Header -->
  <div class="text-center mb-8">
    <div class="inline-flex items-center px-4 py-2 bg-sage-100 rounded-full border border-sage-200 mb-4">
      <span class="text-2xl mr-2">üìÖ</span>
      <span class="text-sage-700 font-semibold text-sm">
        {locale === 'fr' ? 'Disponibilit√©s' : 'Availability'}
      </span>
    </div>
    <h3 class="text-2xl font-semibold text-forest-800 mb-2">
      {locale === 'fr' ? 'V√©rifiez nos disponibilit√©s' : 'Check our availability'}
    </h3>
    <p class="text-sage-600">
      {locale === 'fr' ? 'S√©lectionnez vos dates pr√©f√©r√©es' : 'Select your preferred dates'}
    </p>
  </div>

  <!-- Calendar Grid -->
  <div class="grid lg:grid-cols-2 gap-8 mb-8">
    
    <!-- Current Month -->
    <div class="group">
      <div class="bg-white/60 rounded-xl p-6 border border-sage-100 shadow-soft backdrop-blur-sm group-hover:shadow-medium transition-all duration-300">
        <div class="flex items-center justify-center mb-6">
          <div class="flex items-center space-x-3">
            <div class="w-10 h-10 bg-sage-100 rounded-lg flex items-center justify-center">
              <span class="text-sage-600 text-lg">üìÜ</span>
            </div>
            <h4 class="text-xl font-semibold text-forest-800">
              {MONTH_NAMES[locale][currentMonth.month]} {currentMonth.year}
            </h4>
          </div>
        </div>
        
        <div class="grid grid-cols-7 gap-2">
          <!-- Day headers -->
          {DAY_NAMES[locale].map(day => (
            <div class="text-center font-semibold text-sage-600 py-2 text-sm">
              {day}
            </div>
          ))}
          
          <!-- Calendar days -->
          {currentMonth.days.map(({ day, isBooked, isPast, isAvailable }) => (
            <div class={`
              aspect-square flex items-center justify-center text-sm rounded-lg font-medium transition-all duration-200
              ${!day ? '' : 
                isPast ? 'text-forest-300 bg-gray-50' :
                isBooked ? 'bg-gradient-to-br from-red-100 to-red-200 text-red-700 border border-red-200' :
                isAvailable ? 'bg-gradient-to-br from-sage-100 to-sage-200 text-sage-700 hover:from-sage-200 hover:to-sage-300 hover:scale-105 cursor-pointer shadow-soft hover:shadow-medium border border-sage-200' :
                'text-forest-400 hover:bg-forest-50'
              }
            `}>
              {day}
            </div>
          ))}
        </div>
      </div>
    </div>
    
    <!-- Next Month -->
    <div class="group">
      <div class="bg-white/60 rounded-xl p-6 border border-warm-100 shadow-soft backdrop-blur-sm group-hover:shadow-medium transition-all duration-300">
        <div class="flex items-center justify-center mb-6">
          <div class="flex items-center space-x-3">
            <div class="w-10 h-10 bg-warm-100 rounded-lg flex items-center justify-center">
              <span class="text-warm-600 text-lg">üìÜ</span>
            </div>
            <h4 class="text-xl font-semibold text-forest-800">
              {MONTH_NAMES[locale][nextMonth.month]} {nextMonth.year}
            </h4>
          </div>
        </div>
        
        <div class="grid grid-cols-7 gap-2">
          <!-- Day headers -->
          {DAY_NAMES[locale].map(day => (
            <div class="text-center font-semibold text-warm-600 py-2 text-sm">
              {day}
            </div>
          ))}
          
          <!-- Calendar days -->
          {nextMonth.days.map(({ day, isBooked, isPast, isAvailable }) => (
            <div class={`
              aspect-square flex items-center justify-center text-sm rounded-lg font-medium transition-all duration-200
              ${!day ? '' : 
                isPast ? 'text-forest-300 bg-gray-50' :
                isBooked ? 'bg-gradient-to-br from-red-100 to-red-200 text-red-700 border border-red-200' :
                isAvailable ? 'bg-gradient-to-br from-sage-100 to-sage-200 text-sage-700 hover:from-sage-200 hover:to-sage-300 hover:scale-105 cursor-pointer shadow-soft hover:shadow-medium border border-sage-200' :
                'text-forest-400 hover:bg-forest-50'
              }
            `}>
              {day}
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
  
  <!-- Enhanced Legend -->
  <div class="bg-white/80 rounded-xl p-6 border border-sage-100 backdrop-blur-sm">
    <div class="flex flex-wrap justify-center gap-8">
      
      <div class="flex items-center space-x-3">
        <div class="w-8 h-8 bg-gradient-to-br from-sage-100 to-sage-200 rounded-lg border border-sage-200 shadow-soft"></div>
        <div>
          <div class="font-medium text-forest-800">
            {locale === 'fr' ? 'Disponible' : 'Available'}
          </div>
          <div class="text-sm text-sage-600">
            {locale === 'fr' ? 'R√©servable' : 'Bookable'}
          </div>
        </div>
      </div>
      
      <div class="flex items-center space-x-3">
        <div class="w-8 h-8 bg-gradient-to-br from-red-100 to-red-200 rounded-lg border border-red-200 shadow-soft"></div>
        <div>
          <div class="font-medium text-forest-800">
            {locale === 'fr' ? 'R√©serv√©' : 'Booked'}
          </div>
          <div class="text-sm text-red-600">
            {locale === 'fr' ? 'Non disponible' : 'Unavailable'}
          </div>
        </div>
      </div>
      
      <div class="flex items-center space-x-3">
        <div class="w-8 h-8 bg-gray-50 rounded-lg border border-gray-200"></div>
        <div>
          <div class="font-medium text-forest-800">
            {locale === 'fr' ? 'Pass√©' : 'Past'}
          </div>
          <div class="text-sm text-forest-400">
            {locale === 'fr' ? 'Date d√©pass√©e' : 'Date passed'}
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Booking CTA -->
  <div class="mt-8 text-center">
    <div class="bg-gradient-to-r from-sage-50 to-warm-50 rounded-xl p-6 border border-sage-200">
      <p class="text-forest-700 mb-4">
        {locale === 'fr' 
          ? 'Dates trouv√©es ? Contactez-nous pour finaliser votre r√©servation'
          : 'Found your dates? Contact us to finalize your booking'
        }
      </p>
      <a 
        href="#contact"
        class="inline-flex items-center px-6 py-3 bg-sage-gradient text-white rounded-xl font-semibold shadow-sage hover:shadow-lg hover:scale-105 transition-all duration-300"
      >
        <span>{locale === 'fr' ? 'R√©server Maintenant' : 'Book Now'}</span>
        <svg class="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
        </svg>
      </a>
    </div>
  </div>
</div>

<script>
  // Enhanced calendar interactivity
  class ModernCalendar {
    constructor() {
      this.selectedDates = new Set();
      this.init();
    }

    init() {
      this.setupDateSelection();
      this.setupHoverEffects();
    }

    setupDateSelection() {
      const availableDates = document.querySelectorAll('.cursor-pointer');
      
      availableDates.forEach(date => {
        date.addEventListener('click', (e) => {
          this.toggleDateSelection(e.target);
        });
      });
    }

    setupHoverEffects() {
      const calendarDays = document.querySelectorAll('[class*="aspect-square"]');
      
      calendarDays.forEach(day => {
        if (day.classList.contains('cursor-pointer')) {
          day.addEventListener('mouseenter', () => {
            day.style.transform = 'scale(1.05)';
          });
          
          day.addEventListener('mouseleave', () => {
            if (!day.classList.contains('selected')) {
              day.style.transform = 'scale(1)';
            }
          });
        }
      });
    }

    toggleDateSelection(dateElement) {
      const dateText = dateElement.textContent.trim();
      
      if (this.selectedDates.has(dateText)) {
        this.selectedDates.delete(dateText);
        dateElement.classList.remove('selected', 'ring-2', 'ring-sage-500', 'ring-offset-2');
        dateElement.style.transform = 'scale(1)';
      } else {
        this.selectedDates.add(dateText);
        dateElement.classList.add('selected', 'ring-2', 'ring-sage-500', 'ring-offset-2');
        dateElement.style.transform = 'scale(1.1)';
      }

      // Update booking button or show selection feedback
      this.updateSelectionFeedback();
    }

    updateSelectionFeedback() {
      if (this.selectedDates.size > 0) {
        // Could show selected dates or update booking form
        console.log('Selected dates:', Array.from(this.selectedDates));
      }
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new ModernCalendar();
  });
</script>